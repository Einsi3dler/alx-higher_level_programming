This test module tests a function that works on a matrix.
This function divdes all the number in the matrix(lists of int lists)

LETS BEGIN
::
	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
	>>> matrix = [[1, 2, 3], [4, 5, 6]]
	>>> matrix_divided(matrix, 3)
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
        >>> matrix = [[1, 2, 3], [4, 5, 6]]
        >>> matrix_divided(matrix, 3)
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
	>>> matrix
	[[1, 2, 3], [4, 5, 6]]
	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 'str')
	Traceback (innermost last):
                ...
        TypeError: div must be a number
	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
	Traceback (innermost last):
		...
	ZeroDivisionError: division by zero
	>>> matrix_divided([[1, 'i', 'i'], [4, 5, 6]], 2)
	Traceback (innermost last):	
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats
	>>> matrix_divided([[1, 2], [4, 5, 6]], 2)
	Traceback (innermost last):
		...
	TypeError: Each row of the matrix must have the same size
	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], float('inf'))
	[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]
	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], float('nan'))	
	[[nan, nan, nan], [nan, nan, nan]]
	>>> matrix_divided([[1, 2, 3], [4, float('inf'), 6]], float('inf'))
	[[0.0, 0.0, 0.0], [0.0, nan, 0.0]]
	>>> matrix_divided([[1, 2, 3], [4, float('inf'), 6]], 2)
	[[0.5, 1.0, 1.5], [2.0, inf, 3.0]]
	>>> matrix_divided([[1, 2, 3], [4, 5, 6]])
	Traceback (most recent call last):
		...
	TypeError: matrix_divided() missing 1 required positional argument: 'div'
	>>> matrix_divided()
	Traceback (most recent call last):
  		...
	TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
	
